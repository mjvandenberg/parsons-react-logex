import { Rule } from '../logEx/rules';

const h = 'rule.logic.propositional.absorption',
  g = 'rule.logic.propositional.assoc',
  b = 'rule.logic.propositional.commutativity',
  u = 'rule.logic.propositional.demorgan',
  v = 'rule.logic.propositional.distribution',
  x = 'rule.logic.propositional.doublenegation',
  C = 'rule.logic.propositional.equivalence',
  z = 'rule.logic.propositional.falsecomplement',
  w = 'rule.logic.propositional.falseconjunction',
  k = 'rule.logic.propositional.falsedisjunction',
  y = 'rule.logic.propositional.nottrue',
  B = 'rule.logic.propositional.implication',
  M = 'rule.logic.propositional.idempotency',
  H = 'rule.logic.propositional.truecomplement',
  E = 'rule.logic.propositional.trueconjunction',
  V = 'rule.logic.propositional.truedisjunction',
  L = 'rule.logic.propositional.notfalse';

export const ruleMapping: { [index: string]: Rule } = {
  'logic.propositional.absorption': h,
  'logic.propositional.absorpor': h,
  'logic.propositional.absorpor.inv': h,
  'logic.propositional.absorpand': h,
  'logic.propositional.absorpand.inv': h,
  'logic.propositional.absorpor-subset': h,
  'logic.propositional.assoc': g,
  'logic.propositional.assocand': g,
  'logic.propositional.assocor': g,
  'logic.propositional.commutativity': b,
  'logic.propositional.command': b,
  'logic.propositional.commor': b,
  'logic.propositional.commor.sort': b,
  'logic.propositional.command.sort': b,
  'logic.propositional.complor.sort': b,
  'logic.propositional.compland.sort': b,
  'logic.propositional.idempor.sort': b,
  'logic.propositional.idempand.sort': b,
  'logic.propositional.top-is-and.com': b,
  'logic.propositional.top-is-or.com': b,
  'logic.propositional.command.common-literal-special': b,
  'logic.propositional.command.common-literal': b,
  'logic.propositional.demorgan': u,
  'logic.propositional.demorganor': u,
  'logic.propositional.demorganand': u,
  'logic.propositional.gendemorganand': u,
  'logic.propositional.gendemorganor': u,
  'logic.propositional.demorganornot': u,
  'logic.propositional.demorganandnot': u,
  'logic.propositional.invdemorganand': u,
  'logic.propositional.invdemorganor': u,
  'logic.propositional.distribution': v,
  'logic.propositional.andoveror': v,
  'logic.propositional.oroverand': v,
  'logic.propositional.genandoveror': v,
  'logic.propositional.genoroverand': v,
  'logic.propositional.invoroverand': v,
  'logic.propositional.invandoveror': v,
  'logic.propositional.distrornot': v,
  'logic.propositional.andoveror.inv.common-literal': v,
  'logic.propositional.specialdistrnotr': v,
  'logic.propositional.doublenegation': x,
  'logic.propositional.notnot': x,
  'logic.propositional.geninvdoublenegand': x,
  'logic.propositional.geninvdoublenegor': x,
  'logic.propositional.notnot.inv': x,
  'logic.propositional.equivalence': C,
  'logic.propositional.defequiv': C,
  'logic.propositional.defequiv.inv': C,
  'logic.propositional.falsecomplement': z,
  'logic.propositional.compland': z,
  'logic.propositional.compland.inv': z,
  'logic.propositional.falseconjunction': w,
  'logic.propositional.falsezeroand': w,
  'logic.propositional.falsezeroand.inv': w,
  'logic.propositional.falsedisjunction': k,
  'logic.propositional.falsezeroor': k,
  'logic.propositional.falsezeroor.inv': k,
  'logic.propositional.group-nottrue': y,
  'logic.propositional.nottrue': y,
  'logic.propositional.nottrue.inv': y,
  'logic.propositional.idempotency': M,
  'logic.propositional.idempor': M,
  'logic.propositional.idempor.inv': M,
  'logic.propositional.idempand': M,
  'logic.propositional.idempand.inv': M,
  'logic.propositional.invidempor': M,
  'logic.propositional.invidempand': M,
  'logic.propositional.implication': B,
  'logic.propositional.defimpl': B,
  'logic.propositional.defimpl.inv': B,
  'logic.propositional.truecomplement': H,
  'logic.propositional.complor': H,
  'logic.propositional.complor.inv': H,
  'logic.propositional.introcompl': H,
  'logic.propositional.trueconjunction': E,
  'logic.propositional.truezeroand': E,
  'logic.propositional.truezeroand.inv': E,
  'logic.propositional.introtrueleft': E,
  'logic.propositional.truedisjunction': V,
  'logic.propositional.truezeroor': V,
  'logic.propositional.truezeroor.inv': V,
  'logic.propositional.group-notfalse': L,
  'logic.propositional.notfalse': L,
  'logic.propositional.notfalse.inv': L,
  'logic.propositional.axiomatic.assumption':
    'rule.logic.propositional.axiomatic.assumption',
};
